{"ast":null,"code":"// High precision for financial calculations\nconst PRECISION=12;function toDecimal(value){return Number(value.toFixed(PRECISION));}export function calcularPrestacao(capital,taxaAnual,nMeses){const taxaMensal=taxaAnual/12/100;const capitalDecimal=toDecimal(capital);if(taxaMensal===0||nMeses===0){return 0;}if(capitalDecimal===0){return 0;}const result=capitalDecimal*taxaMensal/(1-Math.pow(1+taxaMensal,-nMeses));return toDecimal(result);}export function calcularPlanoEmprestimo(dadosBanco){const valorEmprestimo=toDecimal(dadosBanco.valor_emprestimo);const taxaFixa=toDecimal(dadosBanco.taxa_fixa);const periodoFixa=dadosBanco.periodo_fixa;const spread=toDecimal(dadosBanco.spread);const euribor=toDecimal(dadosBanco.euribor);const amortizacoes=dadosBanco.amortizacoes||[];// Calculate total monthly commissions from separate categories\nconst seguroVida=toDecimal(dadosBanco.seguro_vida||0);const seguroMultiriscos=toDecimal(dadosBanco.seguro_multiriscos||0);const manutencaoConta=toDecimal(dadosBanco.manutencao_conta||0);const outros=toDecimal(dadosBanco.outros||0);const comissoesMensais=toDecimal(seguroVida+seguroMultiriscos+manutencaoConta+outros);const comissoesIniciais=toDecimal(dadosBanco.comissoes_iniciais||0);const premiosEntrada=toDecimal(dadosBanco.premios_entrada||0);const devolucaoSpread=dadosBanco.devolucao_spread||false;const anosDevolucaoSpread=dadosBanco.anos_devolucao_spread||0;const tempoEmprestimo=dadosBanco.tempo_emprestimo;let capitalEmDivida=valorEmprestimo;let totalAmortizado=0;let totalJuros=0;let cashOutBruto=comissoesIniciais;let cashOutLiquido=toDecimal(comissoesIniciais-premiosEntrada);const resultados=[];let spreadPagoAcumulado=0;let prestacaoMensal=0;let mesesRestantes=tempoEmprestimo*12;for(let mes=1;mes<=tempoEmprestimo*12;mes++){const anoAtual=Math.floor((mes-1)/12)+1;// Check if there's an amortization in this month\nconst amortizacaoMes=amortizacoes.find(a=>a.prestacao===mes);if(amortizacaoMes){const valorAmortizacao=toDecimal(amortizacaoMes.valor);capitalEmDivida=toDecimal(capitalEmDivida-valorAmortizacao);capitalEmDivida=Math.max(capitalEmDivida,0);totalAmortizado=toDecimal(totalAmortizado+valorAmortizacao);cashOutBruto=toDecimal(cashOutBruto+valorAmortizacao);cashOutLiquido=toDecimal(cashOutLiquido+valorAmortizacao);}// Calculate remaining months correctly\nmesesRestantes=tempoEmprestimo*12-mes+1;// Switch from fixed to variable rate\nlet taxaAplicada;if(mes>periodoFixa*12){taxaAplicada=toDecimal(euribor+spread);}else{taxaAplicada=taxaFixa;}// Recalculate payment if capital changed or rate changed\nif(mes===1||mes===periodoFixa*12+1||amortizacaoMes||capitalEmDivida<=0){if(capitalEmDivida>0&&mesesRestantes>0){prestacaoMensal=calcularPrestacao(capitalEmDivida,taxaAplicada,mesesRestantes);}else{prestacaoMensal=0;}}const taxaMensal=toDecimal(taxaAplicada/12/100);const jurosMes=toDecimal(capitalEmDivida*taxaMensal);const amortizacaoNormalMes=toDecimal(prestacaoMensal-jurosMes);// Accumulate theoretical spread during spread refund period\nlet spreadDevolvidoMes=0;if(devolucaoSpread&&anosDevolucaoSpread>0&&mes<=anosDevolucaoSpread*12){const spreadMensal=toDecimal(spread/12/100);const spreadPagoMes=toDecimal(capitalEmDivida*spreadMensal);spreadPagoAcumulado=toDecimal(spreadPagoAcumulado+spreadPagoMes);spreadDevolvidoMes=spreadPagoMes;// Monthly spread refund\ncashOutBruto=toDecimal(cashOutBruto-spreadPagoMes);cashOutLiquido=toDecimal(cashOutLiquido-spreadPagoMes);}totalAmortizado=toDecimal(totalAmortizado+amortizacaoNormalMes);totalJuros=toDecimal(totalJuros+jurosMes);cashOutBruto=toDecimal(cashOutBruto+prestacaoMensal+comissoesMensais);cashOutLiquido=toDecimal(cashOutLiquido+prestacaoMensal+comissoesMensais);capitalEmDivida=toDecimal(capitalEmDivida-amortizacaoNormalMes);capitalEmDivida=Math.max(capitalEmDivida,0);// Ensure debt reaches zero at the end\nif(mes===tempoEmprestimo*12){capitalEmDivida=0;}if(mes%12===0||mes===tempoEmprestimo*12){// Calculate effective payment considering spread refund\nconst prestacaoEfetiva=toDecimal(prestacaoMensal-spreadDevolvidoMes);const totalMensal=toDecimal(prestacaoEfetiva+comissoesMensais);resultados.push({Ano:anoAtual,\"Prestação Mensal (€)\":Number(prestacaoEfetiva.toFixed(2)),\"Total Mensal (€)\":Number(totalMensal.toFixed(2)),\"Amortização Total (€)\":Number(totalAmortizado.toFixed(2)),\"Capital em Dívida (€)\":Number(capitalEmDivida.toFixed(2)),\"CashOut Bruto (€)\":Number(cashOutBruto.toFixed(2)),\"CashOut Líquido (€)\":Number(cashOutLiquido.toFixed(2)),\"Taxa Aplicada (%)\":Number(taxaAplicada.toFixed(3)),\"Juros Acumulados (€)\":Number(totalJuros.toFixed(2)),\"Comissões Acumuladas (€)\":Number((comissoesIniciais+comissoesMensais*mes).toFixed(2))});}}return resultados;}export function gerarMapaDivida(dadosBanco,nomeBanco){const valorEmprestimo=toDecimal(dadosBanco.valor_emprestimo);const taxaFixa=toDecimal(dadosBanco.taxa_fixa);const periodoFixa=dadosBanco.periodo_fixa;const spread=toDecimal(dadosBanco.spread);const euribor=toDecimal(dadosBanco.euribor);const amortizacoes=dadosBanco.amortizacoes||[];const seguroVida=toDecimal(dadosBanco.seguro_vida||0);const seguroMultiriscos=toDecimal(dadosBanco.seguro_multiriscos||0);const manutencaoConta=toDecimal(dadosBanco.manutencao_conta||0);const outros=toDecimal(dadosBanco.outros||0);const comissoesMensais=toDecimal(seguroVida+seguroMultiriscos+manutencaoConta+outros);const comissoesIniciais=toDecimal(dadosBanco.comissoes_iniciais||0);const premiosEntrada=toDecimal(dadosBanco.premios_entrada||0);const devolucaoSpread=dadosBanco.devolucao_spread||false;const anosDevolucaoSpread=dadosBanco.anos_devolucao_spread||0;const tempoEmprestimo=dadosBanco.tempo_emprestimo;let capitalEmDivida=valorEmprestimo;let spreadPagoAcumulado=0;let totalAmortizado=0;let totalJuros=0;let cashOutBruto=comissoesIniciais;let cashOutLiquido=toDecimal(comissoesIniciais-premiosEntrada);let prestacaoMensal=0;let mesesRestantes=tempoEmprestimo*12;const registos=[];for(let mes=1;mes<=tempoEmprestimo*12;mes++){const ano=Math.floor((mes-1)/12)+1;// Check if there's an amortization in this month\nconst amortizacaoMes=amortizacoes.find(a=>a.prestacao===mes);if(amortizacaoMes){const valorAmortizacao=toDecimal(amortizacaoMes.valor);capitalEmDivida=toDecimal(capitalEmDivida-valorAmortizacao);capitalEmDivida=Math.max(capitalEmDivida,0);totalAmortizado=toDecimal(totalAmortizado+valorAmortizacao);cashOutBruto=toDecimal(cashOutBruto+valorAmortizacao);cashOutLiquido=toDecimal(cashOutLiquido+valorAmortizacao);}// Calculate remaining months correctly\nmesesRestantes=tempoEmprestimo*12-mes+1;let taxaAplicada;if(mes>periodoFixa*12){taxaAplicada=toDecimal(euribor+spread);}else{taxaAplicada=taxaFixa;}// Recalculate payment if capital changed or rate changed\nif(mes===1||mes===periodoFixa*12+1||amortizacaoMes||capitalEmDivida<=0){if(capitalEmDivida>0&&mesesRestantes>0){prestacaoMensal=calcularPrestacao(capitalEmDivida,taxaAplicada,mesesRestantes);}else{prestacaoMensal=0;}}const taxaMensal=toDecimal(taxaAplicada/12/100);const jurosMes=toDecimal(capitalEmDivida*taxaMensal);const amortizacaoNormalMes=toDecimal(prestacaoMensal-jurosMes);// Calculate spread refund\nlet spreadDevolvidoMes=0;if(devolucaoSpread&&anosDevolucaoSpread>0&&mes<=anosDevolucaoSpread*12){const spreadMensal=toDecimal(spread/12/100);const spreadPagoMes=toDecimal(capitalEmDivida*spreadMensal);spreadPagoAcumulado=toDecimal(spreadPagoAcumulado+spreadPagoMes);spreadDevolvidoMes=spreadPagoMes;cashOutBruto=toDecimal(cashOutBruto-spreadPagoMes);cashOutLiquido=toDecimal(cashOutLiquido-spreadPagoMes);}totalAmortizado=toDecimal(totalAmortizado+amortizacaoNormalMes);totalJuros=toDecimal(totalJuros+jurosMes);cashOutBruto=toDecimal(cashOutBruto+prestacaoMensal+comissoesMensais);cashOutLiquido=toDecimal(cashOutLiquido+prestacaoMensal+comissoesMensais);capitalEmDivida=toDecimal(capitalEmDivida-amortizacaoNormalMes);capitalEmDivida=Math.max(capitalEmDivida,0);// Ensure debt reaches zero at the end\nif(mes===tempoEmprestimo*12){capitalEmDivida=0;}// Calculate effective payment considering spread refund\nconst prestacaoEfetiva=toDecimal(prestacaoMensal-spreadDevolvidoMes);const totalMensal=toDecimal(prestacaoEfetiva+comissoesMensais);registos.push({Banco:nomeBanco,Mês:mes,Ano:ano,\"Prestação (€)\":Number(prestacaoEfetiva.toFixed(2)),\"Total Mensal (€)\":Number(totalMensal.toFixed(2)),\"Amortização Total (€)\":Number(totalAmortizado.toFixed(2)),\"Juros (€)\":Number(jurosMes.toFixed(2)),\"Capital em Dívida (€)\":Number(capitalEmDivida.toFixed(2)),\"CashOut Bruto (€)\":Number(cashOutBruto.toFixed(2)),\"CashOut Líquido (€)\":Number(cashOutLiquido.toFixed(2)),\"Taxa Aplicada (%)\":Number(taxaAplicada.toFixed(3)),\"Comissões Acumuladas (€)\":Number((comissoesIniciais+comissoesMensais*mes).toFixed(2))});}return registos;}export function compararBancos(dadosBancos){let anosAnalise=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[1,2,3,5,10,20,40];const resultadosCompletos={};for(const[banco,dados]of Object.entries(dadosBancos)){try{const plano=calcularPlanoEmprestimo(dados);resultadosCompletos[banco]={};for(const resultado of plano){if(anosAnalise.includes(resultado.Ano)){resultadosCompletos[banco][resultado.Ano]=resultado;}}}catch(error){console.error(`Erro ao calcular para ${banco}:`,error);}}return resultadosCompletos;}","map":{"version":3,"names":["PRECISION","toDecimal","value","Number","toFixed","calcularPrestacao","capital","taxaAnual","nMeses","taxaMensal","capitalDecimal","result","Math","pow","calcularPlanoEmprestimo","dadosBanco","valorEmprestimo","valor_emprestimo","taxaFixa","taxa_fixa","periodoFixa","periodo_fixa","spread","euribor","amortizacoes","seguroVida","seguro_vida","seguroMultiriscos","seguro_multiriscos","manutencaoConta","manutencao_conta","outros","comissoesMensais","comissoesIniciais","comissoes_iniciais","premiosEntrada","premios_entrada","devolucaoSpread","devolucao_spread","anosDevolucaoSpread","anos_devolucao_spread","tempoEmprestimo","tempo_emprestimo","capitalEmDivida","totalAmortizado","totalJuros","cashOutBruto","cashOutLiquido","resultados","spreadPagoAcumulado","prestacaoMensal","mesesRestantes","mes","anoAtual","floor","amortizacaoMes","find","a","prestacao","valorAmortizacao","valor","max","taxaAplicada","jurosMes","amortizacaoNormalMes","spreadDevolvidoMes","spreadMensal","spreadPagoMes","prestacaoEfetiva","totalMensal","push","Ano","gerarMapaDivida","nomeBanco","registos","ano","Banco","Mês","compararBancos","dadosBancos","anosAnalise","arguments","length","undefined","resultadosCompletos","banco","dados","Object","entries","plano","resultado","includes","error","console"],"sources":["/home/julio/github/jmbcs/comparador_credito/src/utils/calculations.ts"],"sourcesContent":["import { BankData, DebtMapEntry, MonthlyResult } from '../types';\n\n// High precision for financial calculations\nconst PRECISION = 12;\n\nfunction toDecimal(value: number): number {\n  return Number(value.toFixed(PRECISION));\n}\n\nexport function calcularPrestacao(capital: number, taxaAnual: number, nMeses: number): number {\n  const taxaMensal = taxaAnual / 12 / 100;\n  const capitalDecimal = toDecimal(capital);\n\n  if (taxaMensal === 0 || nMeses === 0) {\n    return 0;\n  }\n\n  if (capitalDecimal === 0) {\n    return 0;\n  }\n\n  const result = (capitalDecimal * taxaMensal) / (1 - Math.pow(1 + taxaMensal, -nMeses));\n  return toDecimal(result);\n}\n\nexport function calcularPlanoEmprestimo(dadosBanco: BankData): MonthlyResult[] {\n  const valorEmprestimo = toDecimal(dadosBanco.valor_emprestimo);\n  const taxaFixa = toDecimal(dadosBanco.taxa_fixa);\n  const periodoFixa = dadosBanco.periodo_fixa;\n  const spread = toDecimal(dadosBanco.spread);\n  const euribor = toDecimal(dadosBanco.euribor);\n  const amortizacoes = dadosBanco.amortizacoes || [];\n\n  // Calculate total monthly commissions from separate categories\n  const seguroVida = toDecimal(dadosBanco.seguro_vida || 0);\n  const seguroMultiriscos = toDecimal(dadosBanco.seguro_multiriscos || 0);\n  const manutencaoConta = toDecimal(dadosBanco.manutencao_conta || 0);\n  const outros = toDecimal(dadosBanco.outros || 0);\n  const comissoesMensais = toDecimal(seguroVida + seguroMultiriscos + manutencaoConta + outros);\n\n  const comissoesIniciais = toDecimal(dadosBanco.comissoes_iniciais || 0);\n  const premiosEntrada = toDecimal(dadosBanco.premios_entrada || 0);\n  const devolucaoSpread = dadosBanco.devolucao_spread || false;\n  const anosDevolucaoSpread = dadosBanco.anos_devolucao_spread || 0;\n  const tempoEmprestimo = dadosBanco.tempo_emprestimo;\n\n  let capitalEmDivida = valorEmprestimo;\n  let totalAmortizado = 0;\n  let totalJuros = 0;\n  let cashOutBruto = comissoesIniciais;\n  let cashOutLiquido = toDecimal(comissoesIniciais - premiosEntrada);\n  const resultados: MonthlyResult[] = [];\n  let spreadPagoAcumulado = 0;\n  let prestacaoMensal = 0;\n  let mesesRestantes = tempoEmprestimo * 12;\n\n  for (let mes = 1; mes <= tempoEmprestimo * 12; mes++) {\n    const anoAtual = Math.floor((mes - 1) / 12) + 1;\n\n    // Check if there's an amortization in this month\n    const amortizacaoMes = amortizacoes.find(a => a.prestacao === mes);\n    if (amortizacaoMes) {\n      const valorAmortizacao = toDecimal(amortizacaoMes.valor);\n      capitalEmDivida = toDecimal(capitalEmDivida - valorAmortizacao);\n      capitalEmDivida = Math.max(capitalEmDivida, 0);\n      totalAmortizado = toDecimal(totalAmortizado + valorAmortizacao);\n      cashOutBruto = toDecimal(cashOutBruto + valorAmortizacao);\n      cashOutLiquido = toDecimal(cashOutLiquido + valorAmortizacao);\n    }\n\n    // Calculate remaining months correctly\n    mesesRestantes = tempoEmprestimo * 12 - mes + 1;\n\n    // Switch from fixed to variable rate\n    let taxaAplicada: number;\n    if (mes > periodoFixa * 12) {\n      taxaAplicada = toDecimal(euribor + spread);\n    } else {\n      taxaAplicada = taxaFixa;\n    }\n\n    // Recalculate payment if capital changed or rate changed\n    if (mes === 1 || mes === periodoFixa * 12 + 1 || amortizacaoMes || capitalEmDivida <= 0) {\n      if (capitalEmDivida > 0 && mesesRestantes > 0) {\n        prestacaoMensal = calcularPrestacao(capitalEmDivida, taxaAplicada, mesesRestantes);\n      } else {\n        prestacaoMensal = 0;\n      }\n    }\n\n    const taxaMensal = toDecimal(taxaAplicada / 12 / 100);\n    const jurosMes = toDecimal(capitalEmDivida * taxaMensal);\n    const amortizacaoNormalMes = toDecimal(prestacaoMensal - jurosMes);\n\n    // Accumulate theoretical spread during spread refund period\n    let spreadDevolvidoMes = 0;\n    if (devolucaoSpread && anosDevolucaoSpread > 0 && mes <= anosDevolucaoSpread * 12) {\n      const spreadMensal = toDecimal(spread / 12 / 100);\n      const spreadPagoMes = toDecimal(capitalEmDivida * spreadMensal);\n      spreadPagoAcumulado = toDecimal(spreadPagoAcumulado + spreadPagoMes);\n      spreadDevolvidoMes = spreadPagoMes;\n      // Monthly spread refund\n      cashOutBruto = toDecimal(cashOutBruto - spreadPagoMes);\n      cashOutLiquido = toDecimal(cashOutLiquido - spreadPagoMes);\n    }\n\n    totalAmortizado = toDecimal(totalAmortizado + amortizacaoNormalMes);\n    totalJuros = toDecimal(totalJuros + jurosMes);\n    cashOutBruto = toDecimal(cashOutBruto + prestacaoMensal + comissoesMensais);\n    cashOutLiquido = toDecimal(cashOutLiquido + prestacaoMensal + comissoesMensais);\n\n    capitalEmDivida = toDecimal(capitalEmDivida - amortizacaoNormalMes);\n    capitalEmDivida = Math.max(capitalEmDivida, 0);\n\n    // Ensure debt reaches zero at the end\n    if (mes === tempoEmprestimo * 12) {\n      capitalEmDivida = 0;\n    }\n\n    if (mes % 12 === 0 || mes === tempoEmprestimo * 12) {\n      // Calculate effective payment considering spread refund\n      const prestacaoEfetiva = toDecimal(prestacaoMensal - spreadDevolvidoMes);\n      const totalMensal = toDecimal(prestacaoEfetiva + comissoesMensais);\n\n      resultados.push({\n        Ano: anoAtual,\n        \"Prestação Mensal (€)\": Number(prestacaoEfetiva.toFixed(2)),\n        \"Total Mensal (€)\": Number(totalMensal.toFixed(2)),\n        \"Amortização Total (€)\": Number(totalAmortizado.toFixed(2)),\n        \"Capital em Dívida (€)\": Number(capitalEmDivida.toFixed(2)),\n        \"CashOut Bruto (€)\": Number(cashOutBruto.toFixed(2)),\n        \"CashOut Líquido (€)\": Number(cashOutLiquido.toFixed(2)),\n        \"Taxa Aplicada (%)\": Number(taxaAplicada.toFixed(3)),\n        \"Juros Acumulados (€)\": Number(totalJuros.toFixed(2)),\n        \"Comissões Acumuladas (€)\": Number((comissoesIniciais + comissoesMensais * mes).toFixed(2)),\n      });\n    }\n  }\n\n  return resultados;\n}\n\nexport function gerarMapaDivida(dadosBanco: BankData, nomeBanco: string): DebtMapEntry[] {\n  const valorEmprestimo = toDecimal(dadosBanco.valor_emprestimo);\n  const taxaFixa = toDecimal(dadosBanco.taxa_fixa);\n  const periodoFixa = dadosBanco.periodo_fixa;\n  const spread = toDecimal(dadosBanco.spread);\n  const euribor = toDecimal(dadosBanco.euribor);\n  const amortizacoes = dadosBanco.amortizacoes || [];\n\n  const seguroVida = toDecimal(dadosBanco.seguro_vida || 0);\n  const seguroMultiriscos = toDecimal(dadosBanco.seguro_multiriscos || 0);\n  const manutencaoConta = toDecimal(dadosBanco.manutencao_conta || 0);\n  const outros = toDecimal(dadosBanco.outros || 0);\n  const comissoesMensais = toDecimal(seguroVida + seguroMultiriscos + manutencaoConta + outros);\n\n  const comissoesIniciais = toDecimal(dadosBanco.comissoes_iniciais || 0);\n  const premiosEntrada = toDecimal(dadosBanco.premios_entrada || 0);\n  const devolucaoSpread = dadosBanco.devolucao_spread || false;\n  const anosDevolucaoSpread = dadosBanco.anos_devolucao_spread || 0;\n  const tempoEmprestimo = dadosBanco.tempo_emprestimo;\n\n  let capitalEmDivida = valorEmprestimo;\n  let spreadPagoAcumulado = 0;\n  let totalAmortizado = 0;\n  let totalJuros = 0;\n  let cashOutBruto = comissoesIniciais;\n  let cashOutLiquido = toDecimal(comissoesIniciais - premiosEntrada);\n  let prestacaoMensal = 0;\n  let mesesRestantes = tempoEmprestimo * 12;\n\n  const registos: DebtMapEntry[] = [];\n\n  for (let mes = 1; mes <= tempoEmprestimo * 12; mes++) {\n    const ano = Math.floor((mes - 1) / 12) + 1;\n\n    // Check if there's an amortization in this month\n    const amortizacaoMes = amortizacoes.find(a => a.prestacao === mes);\n    if (amortizacaoMes) {\n      const valorAmortizacao = toDecimal(amortizacaoMes.valor);\n      capitalEmDivida = toDecimal(capitalEmDivida - valorAmortizacao);\n      capitalEmDivida = Math.max(capitalEmDivida, 0);\n      totalAmortizado = toDecimal(totalAmortizado + valorAmortizacao);\n      cashOutBruto = toDecimal(cashOutBruto + valorAmortizacao);\n      cashOutLiquido = toDecimal(cashOutLiquido + valorAmortizacao);\n    }\n\n    // Calculate remaining months correctly\n    mesesRestantes = tempoEmprestimo * 12 - mes + 1;\n\n    let taxaAplicada: number;\n    if (mes > periodoFixa * 12) {\n      taxaAplicada = toDecimal(euribor + spread);\n    } else {\n      taxaAplicada = taxaFixa;\n    }\n\n    // Recalculate payment if capital changed or rate changed\n    if (mes === 1 || mes === periodoFixa * 12 + 1 || amortizacaoMes || capitalEmDivida <= 0) {\n      if (capitalEmDivida > 0 && mesesRestantes > 0) {\n        prestacaoMensal = calcularPrestacao(capitalEmDivida, taxaAplicada, mesesRestantes);\n      } else {\n        prestacaoMensal = 0;\n      }\n    }\n\n    const taxaMensal = toDecimal(taxaAplicada / 12 / 100);\n    const jurosMes = toDecimal(capitalEmDivida * taxaMensal);\n    const amortizacaoNormalMes = toDecimal(prestacaoMensal - jurosMes);\n\n    // Calculate spread refund\n    let spreadDevolvidoMes = 0;\n    if (devolucaoSpread && anosDevolucaoSpread > 0 && mes <= anosDevolucaoSpread * 12) {\n      const spreadMensal = toDecimal(spread / 12 / 100);\n      const spreadPagoMes = toDecimal(capitalEmDivida * spreadMensal);\n      spreadPagoAcumulado = toDecimal(spreadPagoAcumulado + spreadPagoMes);\n      spreadDevolvidoMes = spreadPagoMes;\n      cashOutBruto = toDecimal(cashOutBruto - spreadPagoMes);\n      cashOutLiquido = toDecimal(cashOutLiquido - spreadPagoMes);\n    }\n\n    totalAmortizado = toDecimal(totalAmortizado + amortizacaoNormalMes);\n    totalJuros = toDecimal(totalJuros + jurosMes);\n    cashOutBruto = toDecimal(cashOutBruto + prestacaoMensal + comissoesMensais);\n    cashOutLiquido = toDecimal(cashOutLiquido + prestacaoMensal + comissoesMensais);\n\n    capitalEmDivida = toDecimal(capitalEmDivida - amortizacaoNormalMes);\n    capitalEmDivida = Math.max(capitalEmDivida, 0);\n\n    // Ensure debt reaches zero at the end\n    if (mes === tempoEmprestimo * 12) {\n      capitalEmDivida = 0;\n    }\n\n    // Calculate effective payment considering spread refund\n    const prestacaoEfetiva = toDecimal(prestacaoMensal - spreadDevolvidoMes);\n    const totalMensal = toDecimal(prestacaoEfetiva + comissoesMensais);\n\n    registos.push({\n      Banco: nomeBanco,\n      Mês: mes,\n      Ano: ano,\n      \"Prestação (€)\": Number(prestacaoEfetiva.toFixed(2)),\n      \"Total Mensal (€)\": Number(totalMensal.toFixed(2)),\n      \"Amortização Total (€)\": Number(totalAmortizado.toFixed(2)),\n      \"Juros (€)\": Number(jurosMes.toFixed(2)),\n      \"Capital em Dívida (€)\": Number(capitalEmDivida.toFixed(2)),\n      \"CashOut Bruto (€)\": Number(cashOutBruto.toFixed(2)),\n      \"CashOut Líquido (€)\": Number(cashOutLiquido.toFixed(2)),\n      \"Taxa Aplicada (%)\": Number(taxaAplicada.toFixed(3)),\n      \"Comissões Acumuladas (€)\": Number((comissoesIniciais + comissoesMensais * mes).toFixed(2)),\n    });\n  }\n\n  return registos;\n}\n\nexport function compararBancos(\n  dadosBancos: { [key: string]: BankData },\n  anosAnalise: number[] = [1, 2, 3, 5, 10, 20, 40]\n): { [key: string]: { [key: number]: MonthlyResult } } {\n  const resultadosCompletos: { [key: string]: { [key: number]: MonthlyResult } } = {};\n\n  for (const [banco, dados] of Object.entries(dadosBancos)) {\n    try {\n      const plano = calcularPlanoEmprestimo(dados);\n      resultadosCompletos[banco] = {};\n\n      for (const resultado of plano) {\n        if (anosAnalise.includes(resultado.Ano)) {\n          resultadosCompletos[banco][resultado.Ano] = resultado;\n        }\n      }\n    } catch (error) {\n      console.error(`Erro ao calcular para ${banco}:`, error);\n    }\n  }\n\n  return resultadosCompletos;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}