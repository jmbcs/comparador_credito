{"ast":null,"code":"// High precision for financial calculations\nconst PRECISION = 12;\nfunction toDecimal(value) {\n  return Number(value.toFixed(PRECISION));\n}\nexport function calcularPrestacao(capital, taxaAnual, nMeses) {\n  const taxaMensal = taxaAnual / 12 / 100;\n  const capitalDecimal = toDecimal(capital);\n  if (taxaMensal === 0 || nMeses === 0) {\n    return 0;\n  }\n  if (capitalDecimal === 0) {\n    return 0;\n  }\n  const result = capitalDecimal * taxaMensal / (1 - Math.pow(1 + taxaMensal, -nMeses));\n  return toDecimal(result);\n}\nexport function calcularPlanoEmprestimo(dadosBanco) {\n  const valorEmprestimo = toDecimal(dadosBanco.valor_emprestimo);\n  const taxaFixa = toDecimal(dadosBanco.taxa_fixa);\n  const periodoFixa = dadosBanco.periodo_fixa;\n  const spread = toDecimal(dadosBanco.spread);\n  const euribor = toDecimal(dadosBanco.euribor);\n  const amortizacoes = dadosBanco.amortizacoes || [];\n\n  // Calculate total monthly commissions from separate categories\n  const seguroVida = toDecimal(dadosBanco.seguro_vida || 0);\n  const seguroMultiriscos = toDecimal(dadosBanco.seguro_multiriscos || 0);\n  const manutencaoConta = toDecimal(dadosBanco.manutencao_conta || 0);\n  const outros = toDecimal(dadosBanco.outros || 0);\n  const comissoesMensais = toDecimal(seguroVida + seguroMultiriscos + manutencaoConta + outros);\n  const comissoesIniciais = toDecimal(dadosBanco.comissoes_iniciais || 0);\n  const premiosEntrada = toDecimal(dadosBanco.premios_entrada || 0);\n  const devolucaoSpread = dadosBanco.devolucao_spread || false;\n  const anosDevolucaoSpread = dadosBanco.anos_devolucao_spread || 0;\n  const tempoEmprestimo = dadosBanco.tempo_emprestimo;\n  let capitalEmDivida = valorEmprestimo;\n  let totalAmortizado = 0;\n  let totalJuros = 0;\n  let cashOutBruto = comissoesIniciais;\n  let cashOutLiquido = toDecimal(comissoesIniciais - premiosEntrada);\n  const resultados = [];\n  let spreadPagoAcumulado = 0;\n  let prestacaoMensal = 0;\n  let mesesRestantes = tempoEmprestimo * 12;\n  for (let mes = 1; mes <= tempoEmprestimo * 12; mes++) {\n    const anoAtual = Math.floor((mes - 1) / 12) + 1;\n\n    // Check if there's an amortization in this month\n    const amortizacaoMes = amortizacoes.find(a => a.prestacao === mes);\n    if (amortizacaoMes) {\n      const valorAmortizacao = toDecimal(amortizacaoMes.valor);\n      capitalEmDivida = toDecimal(capitalEmDivida - valorAmortizacao);\n      capitalEmDivida = Math.max(capitalEmDivida, 0);\n      totalAmortizado = toDecimal(totalAmortizado + valorAmortizacao);\n      cashOutBruto = toDecimal(cashOutBruto + valorAmortizacao);\n      cashOutLiquido = toDecimal(cashOutLiquido + valorAmortizacao);\n    }\n\n    // Calculate remaining months correctly\n    mesesRestantes = tempoEmprestimo * 12 - mes + 1;\n\n    // Switch from fixed to variable rate\n    let taxaAplicada;\n    if (mes > periodoFixa * 12) {\n      taxaAplicada = toDecimal(euribor + spread);\n    } else {\n      taxaAplicada = taxaFixa;\n    }\n\n    // Recalculate payment if capital changed or rate changed\n    if (mes === 1 || mes === periodoFixa * 12 + 1 || amortizacaoMes || capitalEmDivida <= 0) {\n      if (capitalEmDivida > 0 && mesesRestantes > 0) {\n        prestacaoMensal = calcularPrestacao(capitalEmDivida, taxaAplicada, mesesRestantes);\n      } else {\n        prestacaoMensal = 0;\n      }\n    }\n    const taxaMensal = toDecimal(taxaAplicada / 12 / 100);\n    const jurosMes = toDecimal(capitalEmDivida * taxaMensal);\n    const amortizacaoNormalMes = toDecimal(prestacaoMensal - jurosMes);\n\n    // Accumulate theoretical spread during spread refund period\n    let spreadDevolvidoMes = 0;\n    if (devolucaoSpread && anosDevolucaoSpread > 0 && mes <= anosDevolucaoSpread * 12) {\n      const spreadMensal = toDecimal(spread / 12 / 100);\n      const spreadPagoMes = toDecimal(capitalEmDivida * spreadMensal);\n      spreadPagoAcumulado = toDecimal(spreadPagoAcumulado + spreadPagoMes);\n      spreadDevolvidoMes = spreadPagoMes;\n      // Monthly spread refund\n      cashOutBruto = toDecimal(cashOutBruto - spreadPagoMes);\n      cashOutLiquido = toDecimal(cashOutLiquido - spreadPagoMes);\n    }\n    totalAmortizado = toDecimal(totalAmortizado + amortizacaoNormalMes);\n    totalJuros = toDecimal(totalJuros + jurosMes);\n    cashOutBruto = toDecimal(cashOutBruto + prestacaoMensal + comissoesMensais);\n    cashOutLiquido = toDecimal(cashOutLiquido + prestacaoMensal + comissoesMensais);\n    capitalEmDivida = toDecimal(capitalEmDivida - amortizacaoNormalMes);\n    capitalEmDivida = Math.max(capitalEmDivida, 0);\n\n    // Ensure debt reaches zero at the end\n    if (mes === tempoEmprestimo * 12) {\n      capitalEmDivida = 0;\n    }\n    if (mes % 12 === 0 || mes === tempoEmprestimo * 12) {\n      // Calculate effective payment considering spread refund\n      const prestacaoEfetiva = toDecimal(prestacaoMensal - spreadDevolvidoMes);\n      const totalMensal = toDecimal(prestacaoEfetiva + comissoesMensais);\n      resultados.push({\n        Ano: anoAtual,\n        \"Prestação Mensal (€)\": Number(prestacaoEfetiva.toFixed(2)),\n        \"Total Mensal (€)\": Number(totalMensal.toFixed(2)),\n        \"Amortização Total (€)\": Number(totalAmortizado.toFixed(2)),\n        \"Capital em Dívida (€)\": Number(capitalEmDivida.toFixed(2)),\n        \"CashOut Bruto (€)\": Number(cashOutBruto.toFixed(2)),\n        \"CashOut Líquido (€)\": Number(cashOutLiquido.toFixed(2)),\n        \"Taxa Aplicada (%)\": Number(taxaAplicada.toFixed(3)),\n        \"Juros Acumulados (€)\": Number(totalJuros.toFixed(2)),\n        \"Comissões Acumuladas (€)\": Number((comissoesIniciais + comissoesMensais * mes).toFixed(2))\n      });\n    }\n  }\n  return resultados;\n}\nexport function gerarMapaDivida(dadosBanco, nomeBanco) {\n  const valorEmprestimo = toDecimal(dadosBanco.valor_emprestimo);\n  const taxaFixa = toDecimal(dadosBanco.taxa_fixa);\n  const periodoFixa = dadosBanco.periodo_fixa;\n  const spread = toDecimal(dadosBanco.spread);\n  const euribor = toDecimal(dadosBanco.euribor);\n  const amortizacoes = dadosBanco.amortizacoes || [];\n  const seguroVida = toDecimal(dadosBanco.seguro_vida || 0);\n  const seguroMultiriscos = toDecimal(dadosBanco.seguro_multiriscos || 0);\n  const manutencaoConta = toDecimal(dadosBanco.manutencao_conta || 0);\n  const outros = toDecimal(dadosBanco.outros || 0);\n  const comissoesMensais = toDecimal(seguroVida + seguroMultiriscos + manutencaoConta + outros);\n  const comissoesIniciais = toDecimal(dadosBanco.comissoes_iniciais || 0);\n  const premiosEntrada = toDecimal(dadosBanco.premios_entrada || 0);\n  const devolucaoSpread = dadosBanco.devolucao_spread || false;\n  const anosDevolucaoSpread = dadosBanco.anos_devolucao_spread || 0;\n  const tempoEmprestimo = dadosBanco.tempo_emprestimo;\n  let capitalEmDivida = valorEmprestimo;\n  let spreadPagoAcumulado = 0;\n  let totalAmortizado = 0;\n  let totalJuros = 0;\n  let cashOutBruto = comissoesIniciais;\n  let cashOutLiquido = toDecimal(comissoesIniciais - premiosEntrada);\n  let prestacaoMensal = 0;\n  let mesesRestantes = tempoEmprestimo * 12;\n  const registos = [];\n  for (let mes = 1; mes <= tempoEmprestimo * 12; mes++) {\n    const ano = Math.floor((mes - 1) / 12) + 1;\n\n    // Check if there's an amortization in this month\n    const amortizacaoMes = amortizacoes.find(a => a.prestacao === mes);\n    if (amortizacaoMes) {\n      const valorAmortizacao = toDecimal(amortizacaoMes.valor);\n      capitalEmDivida = toDecimal(capitalEmDivida - valorAmortizacao);\n      capitalEmDivida = Math.max(capitalEmDivida, 0);\n      totalAmortizado = toDecimal(totalAmortizado + valorAmortizacao);\n      cashOutBruto = toDecimal(cashOutBruto + valorAmortizacao);\n      cashOutLiquido = toDecimal(cashOutLiquido + valorAmortizacao);\n    }\n\n    // Calculate remaining months correctly\n    mesesRestantes = tempoEmprestimo * 12 - mes + 1;\n    let taxaAplicada;\n    if (mes > periodoFixa * 12) {\n      taxaAplicada = toDecimal(euribor + spread);\n    } else {\n      taxaAplicada = taxaFixa;\n    }\n\n    // Recalculate payment if capital changed or rate changed\n    if (mes === 1 || mes === periodoFixa * 12 + 1 || amortizacaoMes || capitalEmDivida <= 0) {\n      if (capitalEmDivida > 0 && mesesRestantes > 0) {\n        prestacaoMensal = calcularPrestacao(capitalEmDivida, taxaAplicada, mesesRestantes);\n      } else {\n        prestacaoMensal = 0;\n      }\n    }\n    const taxaMensal = toDecimal(taxaAplicada / 12 / 100);\n    const jurosMes = toDecimal(capitalEmDivida * taxaMensal);\n    const amortizacaoNormalMes = toDecimal(prestacaoMensal - jurosMes);\n\n    // Calculate spread refund\n    let spreadDevolvidoMes = 0;\n    if (devolucaoSpread && mes <= periodoFixa * 12) {\n      const spreadMensal = toDecimal(spread / 12 / 100);\n      const spreadPagoMes = toDecimal(capitalEmDivida * spreadMensal);\n      spreadPagoAcumulado = toDecimal(spreadPagoAcumulado + spreadPagoMes);\n      spreadDevolvidoMes = spreadPagoMes;\n      cashOutBruto = toDecimal(cashOutBruto - spreadPagoMes);\n      cashOutLiquido = toDecimal(cashOutLiquido - spreadPagoMes);\n    }\n    totalAmortizado = toDecimal(totalAmortizado + amortizacaoNormalMes);\n    totalJuros = toDecimal(totalJuros + jurosMes);\n    cashOutBruto = toDecimal(cashOutBruto + prestacaoMensal + comissoesMensais);\n    cashOutLiquido = toDecimal(cashOutLiquido + prestacaoMensal + comissoesMensais);\n    capitalEmDivida = toDecimal(capitalEmDivida - amortizacaoNormalMes);\n    capitalEmDivida = Math.max(capitalEmDivida, 0);\n\n    // Ensure debt reaches zero at the end\n    if (mes === tempoEmprestimo * 12) {\n      capitalEmDivida = 0;\n    }\n\n    // Calculate effective payment considering spread refund\n    const prestacaoEfetiva = toDecimal(prestacaoMensal - spreadDevolvidoMes);\n    const totalMensal = toDecimal(prestacaoEfetiva + comissoesMensais);\n    registos.push({\n      Banco: nomeBanco,\n      Mês: mes,\n      Ano: ano,\n      \"Prestação (€)\": Number(prestacaoEfetiva.toFixed(2)),\n      \"Total Mensal (€)\": Number(totalMensal.toFixed(2)),\n      \"Amortização Total (€)\": Number(totalAmortizado.toFixed(2)),\n      \"Juros (€)\": Number(jurosMes.toFixed(2)),\n      \"Capital em Dívida (€)\": Number(capitalEmDivida.toFixed(2)),\n      \"CashOut Bruto (€)\": Number(cashOutBruto.toFixed(2)),\n      \"CashOut Líquido (€)\": Number(cashOutLiquido.toFixed(2)),\n      \"Taxa Aplicada (%)\": Number(taxaAplicada.toFixed(3)),\n      \"Comissões Acumuladas (€)\": Number((comissoesIniciais + comissoesMensais * mes).toFixed(2))\n    });\n  }\n  return registos;\n}\nexport function compararBancos(dadosBancos, anosAnalise = [1, 2, 3, 5, 10, 20, 40]) {\n  const resultadosCompletos = {};\n  for (const [banco, dados] of Object.entries(dadosBancos)) {\n    try {\n      const plano = calcularPlanoEmprestimo(dados);\n      resultadosCompletos[banco] = {};\n      for (const resultado of plano) {\n        if (anosAnalise.includes(resultado.Ano)) {\n          resultadosCompletos[banco][resultado.Ano] = resultado;\n        }\n      }\n    } catch (error) {\n      console.error(`Erro ao calcular para ${banco}:`, error);\n    }\n  }\n  return resultadosCompletos;\n}","map":{"version":3,"names":["PRECISION","toDecimal","value","Number","toFixed","calcularPrestacao","capital","taxaAnual","nMeses","taxaMensal","capitalDecimal","result","Math","pow","calcularPlanoEmprestimo","dadosBanco","valorEmprestimo","valor_emprestimo","taxaFixa","taxa_fixa","periodoFixa","periodo_fixa","spread","euribor","amortizacoes","seguroVida","seguro_vida","seguroMultiriscos","seguro_multiriscos","manutencaoConta","manutencao_conta","outros","comissoesMensais","comissoesIniciais","comissoes_iniciais","premiosEntrada","premios_entrada","devolucaoSpread","devolucao_spread","anosDevolucaoSpread","anos_devolucao_spread","tempoEmprestimo","tempo_emprestimo","capitalEmDivida","totalAmortizado","totalJuros","cashOutBruto","cashOutLiquido","resultados","spreadPagoAcumulado","prestacaoMensal","mesesRestantes","mes","anoAtual","floor","amortizacaoMes","find","a","prestacao","valorAmortizacao","valor","max","taxaAplicada","jurosMes","amortizacaoNormalMes","spreadDevolvidoMes","spreadMensal","spreadPagoMes","prestacaoEfetiva","totalMensal","push","Ano","gerarMapaDivida","nomeBanco","registos","ano","Banco","Mês","compararBancos","dadosBancos","anosAnalise","resultadosCompletos","banco","dados","Object","entries","plano","resultado","includes","error","console"],"sources":["/home/julio/github/jmbcs/comparador_credito/src/utils/calculations.ts"],"sourcesContent":["import { BankData, DebtMapEntry, MonthlyResult } from '../types';\n\n// High precision for financial calculations\nconst PRECISION = 12;\n\nfunction toDecimal(value: number): number {\n  return Number(value.toFixed(PRECISION));\n}\n\nexport function calcularPrestacao(capital: number, taxaAnual: number, nMeses: number): number {\n  const taxaMensal = taxaAnual / 12 / 100;\n  const capitalDecimal = toDecimal(capital);\n\n  if (taxaMensal === 0 || nMeses === 0) {\n    return 0;\n  }\n\n  if (capitalDecimal === 0) {\n    return 0;\n  }\n\n  const result = (capitalDecimal * taxaMensal) / (1 - Math.pow(1 + taxaMensal, -nMeses));\n  return toDecimal(result);\n}\n\nexport function calcularPlanoEmprestimo(dadosBanco: BankData): MonthlyResult[] {\n  const valorEmprestimo = toDecimal(dadosBanco.valor_emprestimo);\n  const taxaFixa = toDecimal(dadosBanco.taxa_fixa);\n  const periodoFixa = dadosBanco.periodo_fixa;\n  const spread = toDecimal(dadosBanco.spread);\n  const euribor = toDecimal(dadosBanco.euribor);\n  const amortizacoes = dadosBanco.amortizacoes || [];\n\n  // Calculate total monthly commissions from separate categories\n  const seguroVida = toDecimal(dadosBanco.seguro_vida || 0);\n  const seguroMultiriscos = toDecimal(dadosBanco.seguro_multiriscos || 0);\n  const manutencaoConta = toDecimal(dadosBanco.manutencao_conta || 0);\n  const outros = toDecimal(dadosBanco.outros || 0);\n  const comissoesMensais = toDecimal(seguroVida + seguroMultiriscos + manutencaoConta + outros);\n\n  const comissoesIniciais = toDecimal(dadosBanco.comissoes_iniciais || 0);\n  const premiosEntrada = toDecimal(dadosBanco.premios_entrada || 0);\n  const devolucaoSpread = dadosBanco.devolucao_spread || false;\n  const anosDevolucaoSpread = dadosBanco.anos_devolucao_spread || 0;\n  const tempoEmprestimo = dadosBanco.tempo_emprestimo;\n\n  let capitalEmDivida = valorEmprestimo;\n  let totalAmortizado = 0;\n  let totalJuros = 0;\n  let cashOutBruto = comissoesIniciais;\n  let cashOutLiquido = toDecimal(comissoesIniciais - premiosEntrada);\n  const resultados: MonthlyResult[] = [];\n  let spreadPagoAcumulado = 0;\n  let prestacaoMensal = 0;\n  let mesesRestantes = tempoEmprestimo * 12;\n\n  for (let mes = 1; mes <= tempoEmprestimo * 12; mes++) {\n    const anoAtual = Math.floor((mes - 1) / 12) + 1;\n\n    // Check if there's an amortization in this month\n    const amortizacaoMes = amortizacoes.find(a => a.prestacao === mes);\n    if (amortizacaoMes) {\n      const valorAmortizacao = toDecimal(amortizacaoMes.valor);\n      capitalEmDivida = toDecimal(capitalEmDivida - valorAmortizacao);\n      capitalEmDivida = Math.max(capitalEmDivida, 0);\n      totalAmortizado = toDecimal(totalAmortizado + valorAmortizacao);\n      cashOutBruto = toDecimal(cashOutBruto + valorAmortizacao);\n      cashOutLiquido = toDecimal(cashOutLiquido + valorAmortizacao);\n    }\n\n    // Calculate remaining months correctly\n    mesesRestantes = tempoEmprestimo * 12 - mes + 1;\n\n    // Switch from fixed to variable rate\n    let taxaAplicada: number;\n    if (mes > periodoFixa * 12) {\n      taxaAplicada = toDecimal(euribor + spread);\n    } else {\n      taxaAplicada = taxaFixa;\n    }\n\n    // Recalculate payment if capital changed or rate changed\n    if (mes === 1 || mes === periodoFixa * 12 + 1 || amortizacaoMes || capitalEmDivida <= 0) {\n      if (capitalEmDivida > 0 && mesesRestantes > 0) {\n        prestacaoMensal = calcularPrestacao(capitalEmDivida, taxaAplicada, mesesRestantes);\n      } else {\n        prestacaoMensal = 0;\n      }\n    }\n\n    const taxaMensal = toDecimal(taxaAplicada / 12 / 100);\n    const jurosMes = toDecimal(capitalEmDivida * taxaMensal);\n    const amortizacaoNormalMes = toDecimal(prestacaoMensal - jurosMes);\n\n    // Accumulate theoretical spread during spread refund period\n    let spreadDevolvidoMes = 0;\n    if (devolucaoSpread && anosDevolucaoSpread > 0 && mes <= anosDevolucaoSpread * 12) {\n      const spreadMensal = toDecimal(spread / 12 / 100);\n      const spreadPagoMes = toDecimal(capitalEmDivida * spreadMensal);\n      spreadPagoAcumulado = toDecimal(spreadPagoAcumulado + spreadPagoMes);\n      spreadDevolvidoMes = spreadPagoMes;\n      // Monthly spread refund\n      cashOutBruto = toDecimal(cashOutBruto - spreadPagoMes);\n      cashOutLiquido = toDecimal(cashOutLiquido - spreadPagoMes);\n    }\n\n    totalAmortizado = toDecimal(totalAmortizado + amortizacaoNormalMes);\n    totalJuros = toDecimal(totalJuros + jurosMes);\n    cashOutBruto = toDecimal(cashOutBruto + prestacaoMensal + comissoesMensais);\n    cashOutLiquido = toDecimal(cashOutLiquido + prestacaoMensal + comissoesMensais);\n\n    capitalEmDivida = toDecimal(capitalEmDivida - amortizacaoNormalMes);\n    capitalEmDivida = Math.max(capitalEmDivida, 0);\n\n    // Ensure debt reaches zero at the end\n    if (mes === tempoEmprestimo * 12) {\n      capitalEmDivida = 0;\n    }\n\n    if (mes % 12 === 0 || mes === tempoEmprestimo * 12) {\n      // Calculate effective payment considering spread refund\n      const prestacaoEfetiva = toDecimal(prestacaoMensal - spreadDevolvidoMes);\n      const totalMensal = toDecimal(prestacaoEfetiva + comissoesMensais);\n\n      resultados.push({\n        Ano: anoAtual,\n        \"Prestação Mensal (€)\": Number(prestacaoEfetiva.toFixed(2)),\n        \"Total Mensal (€)\": Number(totalMensal.toFixed(2)),\n        \"Amortização Total (€)\": Number(totalAmortizado.toFixed(2)),\n        \"Capital em Dívida (€)\": Number(capitalEmDivida.toFixed(2)),\n        \"CashOut Bruto (€)\": Number(cashOutBruto.toFixed(2)),\n        \"CashOut Líquido (€)\": Number(cashOutLiquido.toFixed(2)),\n        \"Taxa Aplicada (%)\": Number(taxaAplicada.toFixed(3)),\n        \"Juros Acumulados (€)\": Number(totalJuros.toFixed(2)),\n        \"Comissões Acumuladas (€)\": Number((comissoesIniciais + comissoesMensais * mes).toFixed(2)),\n      });\n    }\n  }\n\n  return resultados;\n}\n\nexport function gerarMapaDivida(dadosBanco: BankData, nomeBanco: string): DebtMapEntry[] {\n  const valorEmprestimo = toDecimal(dadosBanco.valor_emprestimo);\n  const taxaFixa = toDecimal(dadosBanco.taxa_fixa);\n  const periodoFixa = dadosBanco.periodo_fixa;\n  const spread = toDecimal(dadosBanco.spread);\n  const euribor = toDecimal(dadosBanco.euribor);\n  const amortizacoes = dadosBanco.amortizacoes || [];\n\n  const seguroVida = toDecimal(dadosBanco.seguro_vida || 0);\n  const seguroMultiriscos = toDecimal(dadosBanco.seguro_multiriscos || 0);\n  const manutencaoConta = toDecimal(dadosBanco.manutencao_conta || 0);\n  const outros = toDecimal(dadosBanco.outros || 0);\n  const comissoesMensais = toDecimal(seguroVida + seguroMultiriscos + manutencaoConta + outros);\n\n  const comissoesIniciais = toDecimal(dadosBanco.comissoes_iniciais || 0);\n  const premiosEntrada = toDecimal(dadosBanco.premios_entrada || 0);\n  const devolucaoSpread = dadosBanco.devolucao_spread || false;\n  const anosDevolucaoSpread = dadosBanco.anos_devolucao_spread || 0;\n  const tempoEmprestimo = dadosBanco.tempo_emprestimo;\n\n  let capitalEmDivida = valorEmprestimo;\n  let spreadPagoAcumulado = 0;\n  let totalAmortizado = 0;\n  let totalJuros = 0;\n  let cashOutBruto = comissoesIniciais;\n  let cashOutLiquido = toDecimal(comissoesIniciais - premiosEntrada);\n  let prestacaoMensal = 0;\n  let mesesRestantes = tempoEmprestimo * 12;\n\n  const registos: DebtMapEntry[] = [];\n\n  for (let mes = 1; mes <= tempoEmprestimo * 12; mes++) {\n    const ano = Math.floor((mes - 1) / 12) + 1;\n\n    // Check if there's an amortization in this month\n    const amortizacaoMes = amortizacoes.find(a => a.prestacao === mes);\n    if (amortizacaoMes) {\n      const valorAmortizacao = toDecimal(amortizacaoMes.valor);\n      capitalEmDivida = toDecimal(capitalEmDivida - valorAmortizacao);\n      capitalEmDivida = Math.max(capitalEmDivida, 0);\n      totalAmortizado = toDecimal(totalAmortizado + valorAmortizacao);\n      cashOutBruto = toDecimal(cashOutBruto + valorAmortizacao);\n      cashOutLiquido = toDecimal(cashOutLiquido + valorAmortizacao);\n    }\n\n    // Calculate remaining months correctly\n    mesesRestantes = tempoEmprestimo * 12 - mes + 1;\n\n    let taxaAplicada: number;\n    if (mes > periodoFixa * 12) {\n      taxaAplicada = toDecimal(euribor + spread);\n    } else {\n      taxaAplicada = taxaFixa;\n    }\n\n    // Recalculate payment if capital changed or rate changed\n    if (mes === 1 || mes === periodoFixa * 12 + 1 || amortizacaoMes || capitalEmDivida <= 0) {\n      if (capitalEmDivida > 0 && mesesRestantes > 0) {\n        prestacaoMensal = calcularPrestacao(capitalEmDivida, taxaAplicada, mesesRestantes);\n      } else {\n        prestacaoMensal = 0;\n      }\n    }\n\n    const taxaMensal = toDecimal(taxaAplicada / 12 / 100);\n    const jurosMes = toDecimal(capitalEmDivida * taxaMensal);\n    const amortizacaoNormalMes = toDecimal(prestacaoMensal - jurosMes);\n\n    // Calculate spread refund\n    let spreadDevolvidoMes = 0;\n    if (devolucaoSpread && mes <= periodoFixa * 12) {\n      const spreadMensal = toDecimal(spread / 12 / 100);\n      const spreadPagoMes = toDecimal(capitalEmDivida * spreadMensal);\n      spreadPagoAcumulado = toDecimal(spreadPagoAcumulado + spreadPagoMes);\n      spreadDevolvidoMes = spreadPagoMes;\n      cashOutBruto = toDecimal(cashOutBruto - spreadPagoMes);\n      cashOutLiquido = toDecimal(cashOutLiquido - spreadPagoMes);\n    }\n\n    totalAmortizado = toDecimal(totalAmortizado + amortizacaoNormalMes);\n    totalJuros = toDecimal(totalJuros + jurosMes);\n    cashOutBruto = toDecimal(cashOutBruto + prestacaoMensal + comissoesMensais);\n    cashOutLiquido = toDecimal(cashOutLiquido + prestacaoMensal + comissoesMensais);\n\n    capitalEmDivida = toDecimal(capitalEmDivida - amortizacaoNormalMes);\n    capitalEmDivida = Math.max(capitalEmDivida, 0);\n\n    // Ensure debt reaches zero at the end\n    if (mes === tempoEmprestimo * 12) {\n      capitalEmDivida = 0;\n    }\n\n    // Calculate effective payment considering spread refund\n    const prestacaoEfetiva = toDecimal(prestacaoMensal - spreadDevolvidoMes);\n    const totalMensal = toDecimal(prestacaoEfetiva + comissoesMensais);\n\n    registos.push({\n      Banco: nomeBanco,\n      Mês: mes,\n      Ano: ano,\n      \"Prestação (€)\": Number(prestacaoEfetiva.toFixed(2)),\n      \"Total Mensal (€)\": Number(totalMensal.toFixed(2)),\n      \"Amortização Total (€)\": Number(totalAmortizado.toFixed(2)),\n      \"Juros (€)\": Number(jurosMes.toFixed(2)),\n      \"Capital em Dívida (€)\": Number(capitalEmDivida.toFixed(2)),\n      \"CashOut Bruto (€)\": Number(cashOutBruto.toFixed(2)),\n      \"CashOut Líquido (€)\": Number(cashOutLiquido.toFixed(2)),\n      \"Taxa Aplicada (%)\": Number(taxaAplicada.toFixed(3)),\n      \"Comissões Acumuladas (€)\": Number((comissoesIniciais + comissoesMensais * mes).toFixed(2)),\n    });\n  }\n\n  return registos;\n}\n\nexport function compararBancos(\n  dadosBancos: { [key: string]: BankData },\n  anosAnalise: number[] = [1, 2, 3, 5, 10, 20, 40]\n): { [key: string]: { [key: number]: MonthlyResult } } {\n  const resultadosCompletos: { [key: string]: { [key: number]: MonthlyResult } } = {};\n\n  for (const [banco, dados] of Object.entries(dadosBancos)) {\n    try {\n      const plano = calcularPlanoEmprestimo(dados);\n      resultadosCompletos[banco] = {};\n\n      for (const resultado of plano) {\n        if (anosAnalise.includes(resultado.Ano)) {\n          resultadosCompletos[banco][resultado.Ano] = resultado;\n        }\n      }\n    } catch (error) {\n      console.error(`Erro ao calcular para ${banco}:`, error);\n    }\n  }\n\n  return resultadosCompletos;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}